#!/usr/bin/env python

##
##                                       _ _              _ 
##   ___ __ _ _ __ ___  _ __   __ _ _ __(_) |_ _ __ __ _ (_)
##  / __/ _` | '_ ` _ \| '_ \ / _` | '__| | __| '__/ _` || |
## | (_| (_| | | | | | | |_) | (_| | |  | | |_| | | (_| || |
##  \___\__,_|_| |_| |_| .__/ \__,_|_|  |_|\__|_|  \__,_|/ |
##                     |_|                             |__/ 
##
## Alex Holehouse (Pappu Lab and Holehouse Lab)
## Simulation analysis package
## Copyright 2014 - 2021
##

from soursop.sstrajectory import SSTrajectory # import CTTrajectory, the main trajectory reading module
import numpy as np
import mdtraj as md
import os, errno
from soursop.ssanalyzer.analyzer_analysis import *

VERSION_MAJ=3
VERSION_MIN=0

def welcome():
    print("")
    print("#################################################################")
    print("")
    print(".................................................................")
    print("This is ssanalyzer, the command-line analysis utility built on soursop")
    print("")
    print("Version %i.%i" %(VERSION_MAJ, VERSION_MIN))
    print("")
    print("")
    print(".................................................................")
    print("")


def find(s, ch):
    return [i for i, ltr in enumerate(s) if ltr == ch]

def error_abort(msg):
    print("ERROR: %s" % msg)
    exit(1)

def make_sure_path_exists(path, v):
    try:
        os.makedirs(path)
    except OSError as exception:
        if exception.errno != errno.EEXIST:
            raise
        elif path != "." and v:
            print("Directory %s already exists" % path) 
            

        
## ===================================================================================================
##                              Main Script - hold onto your hat!
## ===================================================================================================

if __name__=="__main__":
    import argparse 
    import sys
    from numpy import std, mean

    parser = argparse.ArgumentParser()

    welcome()

    parser.add_argument("--pdb","-pdb", help="Input PDB file") 
    parser.add_argument("--xtc","-xtc", help="Input XTC file") 
    parser.add_argument("--output_directory","-o", help="Output directory") 
    parser.add_argument("--verbose","-v", help="Be loud and obnoxious", action='store_true')
    parser.add_argument("--stride", help="Number of frames to extract [D=1]")
    parser.add_argument("--discard", help="Number of initial frames to discard [D=0]")

    parser.add_argument("--sequence", help="Extract AA sequence", action='store_true')
        
    # polymer analysis
    parser.add_argument("--rg", help="Radius of gyration", dest='rg', action='store_true')
    parser.add_argument("--t_inst", help="Instantanous t", dest='t_inst', action='store_true')
    parser.add_argument("--rh", help="Hydrodynamic radius", dest='rh', action='store_true')
    parser.add_argument("--e2e", help="End to end distance", dest='e2e', action='store_true')
    parser.add_argument("--asph", help="Asphericity", dest='asph', action='store_true')
    parser.add_argument("--is", help="Internal scaling", dest='IS', action='store_true')
    parser.add_argument("--rmsis", help="Internal scaling using root mean squared distances", dest='rmsis', action='store_true')
    parser.add_argument("--fractal_deviation", help="Average deviation from fractal behaviour (20 pairs) [Default stride = 20, stride value is argument]", dest='fractal_deviation')
    parser.add_argument("--rg_re_corr", help="Correlation between Rg^2 and Re^2", dest='rg_re_corr', action='store_true')
    parser.add_argument("--nu_power", help="Polymer Scaling Exponent using COM", dest='nu_power', nargs="?", action="store", const=5)
    parser.add_argument("--nu_power_CA", help="Polymer Scaling Exponent using CA", dest='nu_power_CA', nargs="?", action="store", const=5)
    parser.add_argument("--cmap", help="Contact map", dest='cmap', nargs="?", action="store", const=5.0)
    parser.add_argument("--dm", help="Distance map", dest='dm', action='store_true')
    parser.add_argument("--psm", help="Polymer scaling map", dest='psm', action='store_true')
    parser.add_argument("--afrc", help="Build analytical FRC results", dest='afrc', action='store_true')
    parser.add_argument("--afrcONLY", help="Override that doesnt bother with the trajectory but ONLY performs AFRC cal", dest='afrco', nargs="?", action="store", const=-1.0)
    parser.add_argument("--Q", help="Compute Q factor for native contacts (uses first frame as reference state)", dest='Q', action='store_true')
    parser.add_argument("--rij", help="Compute per-frame distance between residues i and j. Expects format i_j (with underscore)", dest='rij')
    
    # local analysis
    parser.add_argument("--motif_rg", help="Pass two index positions that define the location of a motif over which the local RG is calculated", dest='motif_rg', nargs=2)

    # structure/accessibility analysis
    parser.add_argument("--sasa", help="Solvent Accessible Surface Area", dest='SASA', nargs="?", action="store", const=20)
    parser.add_argument("--sasa_probe", help="Solvent Accessible Surface Area", dest='SASA_probe', nargs=2)
    parser.add_argument("--dssp", help="DSSP analysis (helix, coil, strand)", dest='DSSP', action='store_true')
    parser.add_argument("--bbseg", help="BBSEG analysis", dest='BBSEG', action='store_true')

    # conformational analysis
    parser.add_argument("--lh", '-lh',  help="Linear heterogeneity", dest='lh', action='store_true')
    parser.add_argument("--gh", help="Global heterogeneity [default stride is 10", dest='gh', nargs="?", action="store", const=10)
    parser.add_argument("--ca", help="Cluster analysis with 10 clusters [default stride is 10", dest='ca', nargs="?", action="store", const=10)

    # angle-based mutual information analysis
    parser.add_argument("--dihedral", help="Build full matrices of phi/psi/omega", dest='dihedral', action='store_true')
    parser.add_argument("--MIchi1", help="Mutual information matrix for chi1 angles", dest='MIChi1', action='store_true')
    parser.add_argument("--MIphi", help="Mutual information for phi angles", dest='MIphi', action='store_true')
    parser.add_argument("--MIpsi", help="Mutual information for psi angles", dest='MIpsi', action='store_true')
    parser.add_argument("--MIomega", help="Mutual information for omega angles", dest='MIomega', action='store_true')


    parser.set_defaults(rg=False)
    parser.set_defaults(asph=False)
    parser.set_defaults(IS=False)
    parser.set_defaults(fractal_deviation=False)
    parser.set_defaults(rg_re_corr=False)
    parser.set_defaults(nu=False)
    parser.set_defaults(Q=False)

    parser.set_defaults(motif_rg=False)
    parser.set_defaults(DSSP=False)
    parser.set_defaults(BBSEG=False)
    
    
    parser.set_defaults(lh=False)
    parser.set_defaults(gh=False)
    parser.set_defaults(ca=False)

    
    parser.set_defaults(MIchi1=False)
    parser.set_defaults(MIphi=False)
    parser.set_defaults(MIpsi=False)
    parser.set_defaults(MIomega=False)

    parser.set_defaults(gh=False)
    
    args = parser.parse_args()

    outdir = args.output_directory
    

    # INPUT VALIDATION
    ###########################################################
    if args.pdb is None:
        args.pdb = '__START.pdb'
        if not os.path.isfile(args.pdb):
            args.pdb = 'full.pdb'

    if args.xtc is None:
        args.xtc = '__traj.xtc'  
        if not os.path.isfile(args.xtc):
            args.xtc = 'full.xtc'  
            
    if outdir is None:
        outdir = '.'
    
    # check all files exist
    if not os.path.isfile(args.pdb):
        error_abort("PDB file [%s] could not be read" % args.pdb)

    if args.sequence:
        CO = SSTrajectory('%s'%args.pdb,'%s'%args.pdb, pdblead=False)
        CP = CO.proteinTrajectoryList[0]
        print((CP.get_aminoAcidSequence(oneletter=True)))
        exit(0)

        

    # IF we passed the afrco flag then screw the XTC trajectory
    if args.afrco:
        print("ONLY computing analytic FRC from topology file...")
        
        CO = CTTrajectory('%s'%args.pdb,'%s'%args.pdb, pdblead=False)
        CP = CO.proteinTrajectoryList[0]
        if int(args.afrco) < 1:
            count=10000
        else:
            count = int(args.afrco)
        run_analytical_frc(CP, outdir,count=count)
        exit(0)

    if not os.path.isfile(args.xtc):
        print("ERROR: XTC file [%s] could not be read" % args.xtc)
        exit(1)
    
        
    # check designated output directory is writable
    #if not os.access(outdir, os.W_OK|os.X_OK):        
    #    print "ERROR: Output directory [%s] is not accessible" % outdir
    #    exit(1)

    # check output directory exists and create if it doesn't
    make_sure_path_exists(outdir, args.verbose)
                
    print("Reading in trajectory....", end=' ')
    if args.Q:
        print("NOTE: Using PDB file for native contacts")
        CO = SSTrajectory('%s'%args.xtc,'%s'%args.pdb, pdblead=True)
    else:
        CO = SSTrajectory('%s'%args.xtc,'%s'%args.pdb, pdblead=False)
    CP = CO.proteinTrajectoryList[0]

    full_length=len(CP.traj)
    print("...done!")
    
    # Validate the number of 
    if args.stride:
        stride = int(args.stride)
    else:
        stride = 1

    if args.discard:
        discard = int(args.discard)
    else:
        discard = 0
        
    P1=CP.traj[discard::stride]
    analysis_length=len(P1)
    CO = SSTrajectory(TRJ=P1)
    CP = CO.proteinTrajectoryList[0]

    print("")
    print("Number of frames in file: %i" % (full_length))
    print("Number of frames to be analyzed: %i" % (analysis_length))
    print("Frame selection: %i to end with increments of %i" % (discard, stride))
    print("")

    #>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # radius of gyration
    if args.rg:
        run_RG(CP, outdir)

    # radius of gyration
    if args.t_inst:
        run_t_inst(CP, outdir)


    # radius of gyration
    if args.rh:
        run_RH(CP, outdir)

    if args.e2e:
        run_end_to_end(CP, outdir)

    # asphericity
    if args.asph:
        run_asphericity(CP, outdir)

    # distance map
    if args.dm:
        run_distanceMap(CP, outdir)

    # polymer scaling map
    if args.psm:
        run_polymer_scaling_map(CP, outdir)

    # polymer scaling map
    if args.afrc:
        run_analytical_frc(CP, outdir)

    # internal scaling
    if args.IS:
        run_internal_scaling(CP, outdir)

    # internal scaling
    if args.rmsis:
        run_RMS_internal_scaling(CP, outdir)

    # fractal deviation
    if args.fractal_deviation:
        try:
            run_fractal_deviation(CP, outdir, int(args.fractal_deviation))
        except:
            print("Defaulting to a stride of 20 for fractal deviation analysis")
            run_fractal_deviation(CP, outdir, 20)

    # Q analysis (native contacts)
    if args.Q:
        run_Q_analysis(CP, outdir)
        
    # rij distance analysis
    if args.rij:

        s1 = None
        s2 = None
        try:
            s = args.rij.split('_')
            s1 = int(s[0])
            s2 = int(s[1])
        except Exception:
            print('Failed to parse --rij keyword: should be format --rij i_j where i and j are indices in the sequence')
            print('Skipping...')
            
        if s2 is not None:
            run_rij_analysis(CP, outdir, s1, s2)


    # re vs rg correlation
    if args.rg_re_corr:
        run_rg_re_correlation(CP, outdir)

    if args.nu_power:
        run_scaling_exponent_power(CP, outdir, end_effect=int(args.nu_power))

    if args.nu_power_CA:
        run_scaling_exponent_power_CA(CP, outdir, end_effect=int(args.nu_power_CA))
    
    #>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # rg_motif
    if args.motif_rg is not False:
        
        try:
            R1 = int(args.motif_rg[0])
            R2 = int(args.motif_rg[1])
        except Exception as e:
            print("Unable to parse the motif_rg values to define a local region (%s) - see full error" % (args.rg_motif))
            print(e)
        

        run_motif_RG(CP, outdir, R1, R2)


    #>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # SASA
    if args.SASA:
        run_SASA(CP, outdir, int(args.SASA))

    # SASA with variable probe size
    if args.SASA_probe:
        run_SASA(CP, outdir, int(args.SASA_probe[0]), probe_radius = float(args.SASA_probe[1]))

    # DSSP
    if args.DSSP:
        run_DSSP_analysis(CP, outdir)

    # BBSEG
    if args.BBSEG:
        run_BBSEG_analysis(CP, outdir)

    # contact mpa
    if args.cmap:
        run_contact_map(CP, outdir, d_thresh=float(args.cmap))


    #>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # linear heterogeneity
    if args.lh:
        run_linear_heterogeneity(CP, outdir)

    # fractal deviation
    if args.gh:
        try:
            run_heterogeneity_analysis(CP, int(args.gh), outdir)
        except:
            print("Defaulting to a stride of 10 for global heterogeneity deviation analysis")
            run_heterogeneity_analysis(CP, 10, outdir)

    # cluster analysis
    if args.ca:
        try:
            run_cluster_analysis(CP, int(args.ca), outdir)
        except:
            print("Defaulting to a stride of 10 for cluster analysis")
            run_cluster_analysis(CP, 10, outdir)

            


    #>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    if args.dihedral:
        run_dihedral_extraction(CP, outdir)
    
    if args.MIpsi:
        run_angle_mutual_information(CP, outdir,'psi')

    if args.MIchi1:
        run_angle_mutual_information(CP, outdir,'chi1')

    if args.MIphi:
        run_angle_mutual_information(CP, outdir,'phi')

    if args.MIomega:
        run_angle_mutual_information(CP, outdir,'omega')

    
        


    
    
    
